// Code generated by github.com/cockroachdb/walkabout. DO NOT EDIT.
// source: demo.go

package demo

import (
	"fmt"
	"unsafe"

	e "github.com/cockroachdb/walkabout/engine"
)

// ------ API and public types ------

// TargetTypeId  is a lightweight type token.
type TargetTypeId e.TypeId

// TargetAbstract allows users to treat a Target as an abstract
// tree of nodes. All visitable struct types will have generated methods
// which implement this interface.
type TargetAbstract interface {
	// TargetAt returns the nth field of a struct or nth element of a
	// slice. If the child is a type which directly implements
	// TargetAbstract, it will be returned. If the child is of a pointer or
	// interface type, the value will be automatically dereferenced if it
	// is non-nil. If the child is a slice type, a TargetAbstract wrapper
	// around the slice will be returned.
	TargetAt(index int) TargetAbstract
	// TargetCount returns the number of visitable fields in a struct,
	// or the length of a slice.
	TargetCount() int
	// TargetTypeId  returns a type token.
	TargetTypeId() TargetTypeId
}

var (
	_ TargetAbstract = &ByRefType{}
	_ TargetAbstract = &ByValType{}
	_ TargetAbstract = &ContainerType{}
)

// TargetWalkerFn is used to implement a visitor pattern over
// types which implement Target.
//
// Implementations of this function return a TargetDecision, which
// allows the function to control traversal. The zero value of
// TargetDecision means "continue". Other values can be obtained from the
// provided TargetContext to stop or to return an error.
//
// A TargetDecision can also specify a post-visit function to execute
// or can be used to replace the value being visited.
type TargetWalkerFn func(ctx TargetContext, x Target) TargetDecision

// TargetContext is provided to TargetWalkerFn and acts as a factory
// for constructing TargetDecision instances.
type TargetContext struct {
	impl e.Context
}

// Actions will perform the given actions in place of visiting values
// that would normally be visited.  This allows callers to control
// specific field visitation order or to insert additional callbacks
// between visiting certain values.
func (c *TargetContext) Actions(actions ...TargetAction) TargetDecision {
	if actions == nil || len(actions) == 0 {
		return c.Skip()
	}

	ret := make([]e.Action, len(actions))
	for i, a := range actions {
		ret[i] = e.Action(a)
	}

	return TargetDecision(c.impl.Actions(ret))
}

// Continue returns the zero-value of TargetDecision. It exists only
// for cases where it improves the readability of code.
func (c *TargetContext) Continue() TargetDecision {
	return TargetDecision(c.impl.Continue())
}

// Error returns a TargetDecision which will cause the given error
// to be returned from the Walk() function. Post-visit functions
// will not be called.
func (c *TargetContext) Error(err error) TargetDecision {
	return TargetDecision(c.impl.Error(err))
}

// Halt will end a visitation early and return from the Walk() function.
// Any registered post-visit functions will be called.
func (c *TargetContext) Halt() TargetDecision {
	return TargetDecision(c.impl.Halt())
}

// Skip will not traverse the fields of the current object.
func (c *TargetContext) Skip() TargetDecision {
	return TargetDecision(c.impl.Skip())
}

// TargetDecision is used by TargetWalkerFn to control visitation.
// The TargetContext provided to a TargetWalkerFn acts as a factory
// for TargetDecision instances. In general, the factory methods
// choose a traversal strategy and additional methods on the
// TargetDecision can achieve a variety of side-effects.
type TargetDecision e.Decision

// Intercept registers a function to be called immediately before
// visiting each field or element of the current value.
func (d TargetDecision) Intercept(fn TargetWalkerFn) TargetDecision {
	return TargetDecision((e.Decision)(d).Intercept(fn))
}

// Post registers a post-visit function, which will be called after the
// fields of the current object. The function can make another decision
// about the current value.
func (d TargetDecision) Post(fn TargetWalkerFn) TargetDecision {
	return TargetDecision((e.Decision)(d).Post(fn))
}

// Replace allows the currently-visited value to be replaced. All
// parent nodes will be cloned.
func (d TargetDecision) Replace(x Target) TargetDecision {
	return TargetDecision((e.Decision)(d).Replace(targetIdentify(x)))
}

// targetIdentify is a utility function to map a Target into
// its generated type id and a pointer to the data.
func targetIdentify(x Target) (typeId e.TypeId, data e.Ptr) {
	switch t := x.(type) {
	case *ByRefType:
		typeId = e.TypeId(TargetTypeByRefType)
		data = e.Ptr(t)
	case ByValType:
		typeId = e.TypeId(TargetTypeByValType)
		data = e.Ptr(&t)
	case *ByValType:
		typeId = e.TypeId(TargetTypeByValType)
		data = e.Ptr(t)
	case *ContainerType:
		typeId = e.TypeId(TargetTypeContainerType)
		data = e.Ptr(t)
	default:
		// The most probable reason for this is that the generated code
		// is out of date, or that an implementation of the Target
		// interface from another package is being passed in.
		panic(fmt.Sprintf("unhandled value of type: %T", x))
	}
	return
}

// targetWrap is a utility function to reconstitute a Target
// from an internal type token and a pointer to the value.
func targetWrap(typeId e.TypeId, x e.Ptr) Target {
	switch TargetTypeId(typeId) {
	case TargetTypeByRefType:
		return (*ByRefType)(x)
	case TargetTypeByRefTypePtr:
		return *(**ByRefType)(x)
	case TargetTypeByValType:
		return (*ByValType)(x)
	case TargetTypeByValTypePtr:
		return *(**ByValType)(x)
	case TargetTypeContainerType:
		return (*ContainerType)(x)
	case TargetTypeContainerTypePtr:
		return *(**ContainerType)(x)
	default:
		// This is likely a code-generation problem.
		panic(fmt.Sprintf("unhandled TypeId: %d", typeId))
	}
}

// TargetAction is used by TargetContext.Actions() and allows users
// to have fine-grained control over traversal.
type TargetAction e.Action

// ActionVisit constructs a TargetAction that will visit the given value.
func (c *TargetContext) ActionVisit(x Target) TargetAction {
	return TargetAction(c.impl.ActionVisitTypeId(targetIdentify(x)))
}

// ActionCall constructs a TargetAction that will invoke the given callback.
func (c *TargetContext) ActionCall(fn func() error) TargetAction {
	return TargetAction(c.impl.ActionCall(fn))
}

// ------ Type Enhancements ------

// targetAbstract is a type-safe facade around e.Abstract.
type targetAbstract struct {
	delegate *e.Abstract
}

var _ TargetAbstract = &targetAbstract{}

// TargetAt implements TargetAbstract.
func (a *targetAbstract) TargetAt(index int) (ret TargetAbstract) {
	impl := a.delegate.ChildAt(index)
	if impl == nil {
		return nil
	}
	switch TargetTypeId(impl.TypeId()) {
	case TargetTypeByRefType:
		ret = (*ByRefType)(impl.Ptr())
	case TargetTypeByRefTypePtr:
		ret = *(**ByRefType)(impl.Ptr())
	case TargetTypeByValType:
		ret = (*ByValType)(impl.Ptr())
	case TargetTypeByValTypePtr:
		ret = *(**ByValType)(impl.Ptr())
	case TargetTypeContainerType:
		ret = (*ContainerType)(impl.Ptr())
	case TargetTypeContainerTypePtr:
		ret = *(**ContainerType)(impl.Ptr())
	default:
		ret = &targetAbstract{impl}
	}
	return
}

// TargetCount implements TargetAbstract.
func (a *targetAbstract) TargetCount() int {
	return a.delegate.NumChildren()
}

// TargetTypeId implements TargetAbstract.
func (a *targetAbstract) TargetTypeId() TargetTypeId {
	return TargetTypeId(a.delegate.TypeId())
}

// TargetAt implements TargetAbstract.
func (x *ByRefType) TargetAt(index int) TargetAbstract {
	self := targetAbstract{targetEngine.Abstract(e.TypeId(TargetTypeByRefType), e.Ptr(x))}
	return self.TargetAt(index)
}

// TargetCount returns 0.
func (x *ByRefType) TargetCount() int { return 0 }

// TargetTypeId returns TargetTypeByRefType.
func (*ByRefType) TargetTypeId() TargetTypeId { return TargetTypeByRefType }

// WalkTarget visits the receiver with the provided callback.
func (x *ByRefType) WalkTarget(fn TargetWalkerFn) (_ *ByRefType, changed bool, err error) {
	var y e.Ptr
	_, y, changed, err = targetEngine.Execute(fn, e.TypeId(TargetTypeByRefType), e.Ptr(x), e.TypeId(TargetTypeByRefType))
	if err != nil {
		return nil, false, err
	}
	return (*ByRefType)(y), changed, nil
}

// TargetAt implements TargetAbstract.
func (x *ByValType) TargetAt(index int) TargetAbstract {
	self := targetAbstract{targetEngine.Abstract(e.TypeId(TargetTypeByValType), e.Ptr(x))}
	return self.TargetAt(index)
}

// TargetCount returns 0.
func (x *ByValType) TargetCount() int { return 0 }

// TargetTypeId returns TargetTypeByValType.
func (*ByValType) TargetTypeId() TargetTypeId { return TargetTypeByValType }

// WalkTarget visits the receiver with the provided callback.
func (x *ByValType) WalkTarget(fn TargetWalkerFn) (_ *ByValType, changed bool, err error) {
	var y e.Ptr
	_, y, changed, err = targetEngine.Execute(fn, e.TypeId(TargetTypeByValType), e.Ptr(x), e.TypeId(TargetTypeByValType))
	if err != nil {
		return nil, false, err
	}
	return (*ByValType)(y), changed, nil
}

// TargetAt implements TargetAbstract.
func (x *ContainerType) TargetAt(index int) TargetAbstract {
	self := targetAbstract{targetEngine.Abstract(e.TypeId(TargetTypeContainerType), e.Ptr(x))}
	return self.TargetAt(index)
}

// TargetCount returns 16.
func (x *ContainerType) TargetCount() int { return 16 }

// TargetTypeId returns TargetTypeContainerType.
func (*ContainerType) TargetTypeId() TargetTypeId { return TargetTypeContainerType }

// WalkTarget visits the receiver with the provided callback.
func (x *ContainerType) WalkTarget(fn TargetWalkerFn) (_ *ContainerType, changed bool, err error) {
	var y e.Ptr
	_, y, changed, err = targetEngine.Execute(fn, e.TypeId(TargetTypeContainerType), e.Ptr(x), e.TypeId(TargetTypeContainerType))
	if err != nil {
		return nil, false, err
	}
	return (*ContainerType)(y), changed, nil
}

// WalkTarget visits the receiver with the provided callback.
func WalkTarget(x Target, fn TargetWalkerFn) (_ Target, changed bool, err error) {
	id, ptr := targetIdentify(x)
	id, ptr, changed, err = targetEngine.Execute(fn, id, ptr, e.TypeId(TargetTypeTarget))
	if err != nil {
		return nil, false, err
	}
	if changed {
		return targetWrap(id, ptr), true, nil
	}
	return x, false, nil
}

// ------ Type Mapping ------
var targetEngine = e.New(e.TypeMap{
	// ------ Structs ------
	TargetTypeByRefType: {
		Copy: func(dest, from e.Ptr) { *(*ByRefType)(dest) = *(*ByRefType)(from) },
		Facade: func(impl e.Context, fn e.FacadeFn, x e.Ptr) e.Decision {
			return e.Decision(fn.(TargetWalkerFn)(TargetContext{impl}, (*ByRefType)(x)))
		},
		Fields:    []e.FieldInfo{},
		Name:      "ByRefType",
		NewStruct: func() e.Ptr { return e.Ptr(&ByRefType{}) },
		SizeOf:    unsafe.Sizeof(ByRefType{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(TargetTypeByRefType),
	},
	TargetTypeByValType: {
		Copy: func(dest, from e.Ptr) { *(*ByValType)(dest) = *(*ByValType)(from) },
		Facade: func(impl e.Context, fn e.FacadeFn, x e.Ptr) e.Decision {
			return e.Decision(fn.(TargetWalkerFn)(TargetContext{impl}, (*ByValType)(x)))
		},
		Fields:    []e.FieldInfo{},
		Name:      "ByValType",
		NewStruct: func() e.Ptr { return e.Ptr(&ByValType{}) },
		SizeOf:    unsafe.Sizeof(ByValType{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(TargetTypeByValType),
	},
	TargetTypeContainerType: {
		Copy: func(dest, from e.Ptr) { *(*ContainerType)(dest) = *(*ContainerType)(from) },
		Facade: func(impl e.Context, fn e.FacadeFn, x e.Ptr) e.Decision {
			return e.Decision(fn.(TargetWalkerFn)(TargetContext{impl}, (*ContainerType)(x)))
		},
		Fields: []e.FieldInfo{
			{Name: "ByRef", Offset: unsafe.Offsetof(ContainerType{}.ByRef), Target: e.TypeId(TargetTypeByRefType)},
			{Name: "ByRefPtr", Offset: unsafe.Offsetof(ContainerType{}.ByRefPtr), Target: e.TypeId(TargetTypeByRefTypePtr)},
			{Name: "ByRefSlice", Offset: unsafe.Offsetof(ContainerType{}.ByRefSlice), Target: e.TypeId(TargetTypeByRefTypeSlice)},
			{Name: "ByRefPtrSlice", Offset: unsafe.Offsetof(ContainerType{}.ByRefPtrSlice), Target: e.TypeId(TargetTypeByRefTypePtrSlice)},
			{Name: "ByVal", Offset: unsafe.Offsetof(ContainerType{}.ByVal), Target: e.TypeId(TargetTypeByValType)},
			{Name: "ByValPtr", Offset: unsafe.Offsetof(ContainerType{}.ByValPtr), Target: e.TypeId(TargetTypeByValTypePtr)},
			{Name: "ByValSlice", Offset: unsafe.Offsetof(ContainerType{}.ByValSlice), Target: e.TypeId(TargetTypeByValTypeSlice)},
			{Name: "ByValPtrSlice", Offset: unsafe.Offsetof(ContainerType{}.ByValPtrSlice), Target: e.TypeId(TargetTypeByValTypePtrSlice)},
			{Name: "Container", Offset: unsafe.Offsetof(ContainerType{}.Container), Target: e.TypeId(TargetTypeContainerTypePtr)},
			{Name: "AnotherTarget", Offset: unsafe.Offsetof(ContainerType{}.AnotherTarget), Target: e.TypeId(TargetTypeTarget)},
			{Name: "AnotherTargetPtr", Offset: unsafe.Offsetof(ContainerType{}.AnotherTargetPtr), Target: e.TypeId(TargetTypeTargetPtr)},
			{Name: "EmbedsTarget", Offset: unsafe.Offsetof(ContainerType{}.EmbedsTarget), Target: e.TypeId(TargetTypeEmbedsTarget)},
			{Name: "EmbedsTargetPtr", Offset: unsafe.Offsetof(ContainerType{}.EmbedsTargetPtr), Target: e.TypeId(TargetTypeEmbedsTargetPtr)},
			{Name: "TargetSlice", Offset: unsafe.Offsetof(ContainerType{}.TargetSlice), Target: e.TypeId(TargetTypeTargetSlice)},
			{Name: "InterfacePtrSlice", Offset: unsafe.Offsetof(ContainerType{}.InterfacePtrSlice), Target: e.TypeId(TargetTypeTargetPtrSlice)},
			{Name: "NamedTargets", Offset: unsafe.Offsetof(ContainerType{}.NamedTargets), Target: e.TypeId(TargetTypeTargetSlice)},
		},
		Name:      "ContainerType",
		NewStruct: func() e.Ptr { return e.Ptr(&ContainerType{}) },
		SizeOf:    unsafe.Sizeof(ContainerType{}),
		Kind:      e.KindStruct,
		TypeId:    e.TypeId(TargetTypeContainerType),
	},

	// ------ Interfaces ------
	TargetTypeEmbedsTarget: {
		Copy: func(dest, from e.Ptr) {
			*(*EmbedsTarget)(dest) = *(*EmbedsTarget)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*EmbedsTarget)(x)
			switch d.(type) {
			case ByValType:
				return e.TypeId(TargetTypeByValType)
			case *ByValType:
				return e.TypeId(TargetTypeByValType)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d EmbedsTarget
			switch TargetTypeId(id) {
			case TargetTypeByValType:
				d = (*ByValType)(x)
			case TargetTypeByValTypePtr:
				d = *(**ByValType)(x)
			default:
				return nil
			}
			return e.Ptr(&d)
		},
		Kind:   e.KindInterface,
		Name:   "EmbedsTarget",
		SizeOf: unsafe.Sizeof(EmbedsTarget(nil)),
		TypeId: e.TypeId(TargetTypeEmbedsTarget),
	},
	TargetTypeTarget: {
		Copy: func(dest, from e.Ptr) {
			*(*Target)(dest) = *(*Target)(from)
		},
		IntfType: func(x e.Ptr) e.TypeId {
			d := *(*Target)(x)
			switch d.(type) {
			case *ByRefType:
				return e.TypeId(TargetTypeByRefType)
			case ByValType:
				return e.TypeId(TargetTypeByValType)
			case *ByValType:
				return e.TypeId(TargetTypeByValType)
			case *ContainerType:
				return e.TypeId(TargetTypeContainerType)
			default:
				return 0
			}
		},
		IntfWrap: func(id e.TypeId, x e.Ptr) e.Ptr {
			var d Target
			switch TargetTypeId(id) {
			case TargetTypeByRefType:
				d = (*ByRefType)(x)
			case TargetTypeByRefTypePtr:
				d = *(**ByRefType)(x)
			case TargetTypeByValType:
				d = (*ByValType)(x)
			case TargetTypeByValTypePtr:
				d = *(**ByValType)(x)
			case TargetTypeContainerType:
				d = (*ContainerType)(x)
			case TargetTypeContainerTypePtr:
				d = *(**ContainerType)(x)
			default:
				return nil
			}
			return e.Ptr(&d)
		},
		Kind:   e.KindInterface,
		Name:   "Target",
		SizeOf: unsafe.Sizeof(Target(nil)),
		TypeId: e.TypeId(TargetTypeTarget),
	},

	// ------ Pointers ------
	TargetTypeByRefTypePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ByRefType)(dest) = *(**ByRefType)(from)
		},
		Elem:   e.TypeId(TargetTypeByRefType),
		SizeOf: unsafe.Sizeof((*ByRefType)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(TargetTypeByRefTypePtr),
	},
	TargetTypeByValTypePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ByValType)(dest) = *(**ByValType)(from)
		},
		Elem:   e.TypeId(TargetTypeByValType),
		SizeOf: unsafe.Sizeof((*ByValType)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(TargetTypeByValTypePtr),
	},
	TargetTypeContainerTypePtr: {
		Copy: func(dest, from e.Ptr) {
			*(**ContainerType)(dest) = *(**ContainerType)(from)
		},
		Elem:   e.TypeId(TargetTypeContainerType),
		SizeOf: unsafe.Sizeof((*ContainerType)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(TargetTypeContainerTypePtr),
	},
	TargetTypeEmbedsTargetPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**EmbedsTarget)(dest) = *(**EmbedsTarget)(from)
		},
		Elem:   e.TypeId(TargetTypeEmbedsTarget),
		SizeOf: unsafe.Sizeof((*EmbedsTarget)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(TargetTypeEmbedsTargetPtr),
	},
	TargetTypeTargetPtr: {
		Copy: func(dest, from e.Ptr) {
			*(**Target)(dest) = *(**Target)(from)
		},
		Elem:   e.TypeId(TargetTypeTarget),
		SizeOf: unsafe.Sizeof((*Target)(nil)),
		Kind:   e.KindPointer,
		TypeId: e.TypeId(TargetTypeTargetPtr),
	},

	// ------ Slices ------
	TargetTypeByRefTypePtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*ByRefType)(dest) = *(*[]*ByRefType)(from)
		},
		Elem: e.TypeId(TargetTypeByRefTypePtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*ByRefType, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*ByRefType)(nil)),
		TypeId: e.TypeId(TargetTypeByRefTypePtrSlice),
	},
	TargetTypeByValTypePtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*ByValType)(dest) = *(*[]*ByValType)(from)
		},
		Elem: e.TypeId(TargetTypeByValTypePtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*ByValType, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*ByValType)(nil)),
		TypeId: e.TypeId(TargetTypeByValTypePtrSlice),
	},
	TargetTypeTargetPtrSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]*Target)(dest) = *(*[]*Target)(from)
		},
		Elem: e.TypeId(TargetTypeTargetPtr),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]*Target, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]*Target)(nil)),
		TypeId: e.TypeId(TargetTypeTargetPtrSlice),
	},
	TargetTypeByRefTypeSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]ByRefType)(dest) = *(*[]ByRefType)(from)
		},
		Elem: e.TypeId(TargetTypeByRefType),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]ByRefType, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]ByRefType)(nil)),
		TypeId: e.TypeId(TargetTypeByRefTypeSlice),
	},
	TargetTypeByValTypeSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]ByValType)(dest) = *(*[]ByValType)(from)
		},
		Elem: e.TypeId(TargetTypeByValType),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]ByValType, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]ByValType)(nil)),
		TypeId: e.TypeId(TargetTypeByValTypeSlice),
	},
	TargetTypeTargetSlice: {
		Copy: func(dest, from e.Ptr) {
			*(*[]Target)(dest) = *(*[]Target)(from)
		},
		Elem: e.TypeId(TargetTypeTarget),
		Kind: e.KindSlice,
		NewSlice: func(size int) e.Ptr {
			x := make([]Target, size)
			return e.Ptr(&x)
		},
		SizeOf: unsafe.Sizeof(([]Target)(nil)),
		TypeId: e.TypeId(TargetTypeTargetSlice),
	},
})

// These are lightweight type tokens.
const (
	_ TargetTypeId = iota
	TargetTypeByRefType
	TargetTypeByRefTypePtr
	TargetTypeByRefTypePtrSlice
	TargetTypeByRefTypeSlice
	TargetTypeByValType
	TargetTypeByValTypePtr
	TargetTypeByValTypePtrSlice
	TargetTypeByValTypeSlice
	TargetTypeContainerType
	TargetTypeContainerTypePtr
	TargetTypeEmbedsTarget
	TargetTypeEmbedsTargetPtr
	TargetTypeTarget
	TargetTypeTargetPtr
	TargetTypeTargetPtrSlice
	TargetTypeTargetSlice
)

// String is for debugging use only.
func (t TargetTypeId) String() string {
	return targetEngine.Stringify(e.TypeId(t))
}
